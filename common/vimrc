" get rid of vi compatibility
set nocompatible

" search properties
set ignorecase            " Make searches case-insensitive.
set incsearch             " But do highlight as you type your search.
set hlsearch

" indentation settings
set tabstop=2
set expandtab
set softtabstop=0 " noexpandtab
set shiftwidth=2

" lines numbering
set number
set numberwidth=1

" Show me a ruler
set ruler
" todo rulerformat

" pasting toggle
set pastetoggle=<F2>

" set syntax on
syntax on

set laststatus=2          " last window always has a statusline
set autoindent            " auto-indent
set formatoptions=tcq
set modeline
set bg=dark

set t_Co=256

" set default comment color to cyan instead of darkblue
" which is not very legible on a black background
highlight comment ctermfg=cyan
highlight Visual cterm=bold ctermbg=Blue ctermfg=NONE

highlight LiteralTabs ctermbg=darkgreen guibg=darkgreen
match LiteralTabs /\s\  /
highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
match ExtraWhitespace /\s\+$/

" Enable indentation matching for =>'s
filetype plugin indent on

" to tell you when you passed 80 characters
highlight ColorColumn ctermbg=red
call matchadd('ColorColumn', '\%81v', 100)

" better searching highlight
nnoremap <silent> n n:call HLNext(0.2)<cr>
nnoremap <silent> N N:call HLNext(0.2)<cr>

function! HLNext(blinktime)
  set invcursorline
  redraw
  exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
  set invcursorline
  redraw
endfunction

" show special characters
"set listchars=tab:>-,trail:.,nbsp:~
"set list

" show a horizontal line where the cursor is
set cursorline

" set diff view options
set diffopt=filler,vertical

set showmode
" set wrapping lines when are longer than the screen
set wrap

" macros
let @u = 'ddkP'
let @d = 'ddjP'

" bundles - extensions - plugins
set runtimepath^=~/.vim/bundle/ctrlp.vim
set runtimepath^=~/.vim/bundle/vim-surround
set runtimepath^=~/.vim/bundle/nerdtree
set runtimepath^=~/.vim/bundle/ack.vim
set runtimepath^=~/.vim/bundle/vim-go

" ctrlP bundle properties
let g:ctrlp_types = ['fil','buf','mru']

" NERDTree properties
nmap <leader>t :NERDTreeToggle<Enter>
let NERDTreeQuitOnOpen=1
let g:NERDTreeDirArrowExpandable = '>'
let g:NERDTreeDirArrowCollapsible = '~'


let g:ack_mappings = {
      \  'v':  '<C-W><CR><C-W>L<C-W>p<C-W>J<C-W>p',
      \ 'gv': '<C-W><CR><C-W>L<C-W>p<C-W>J' }
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
    \ }

nmap <leader>n :tabnew<Enter>
nmap <leader>h :tabprev<Enter>
nmap <leader>l :tabnext<Enter>
nmap <leader>j :tabfirst<Enter>
nmap <leader>k :tablast<Enter>

nnoremap Q !!$SHELL<CR>

set wildignore+=**/*.pyc
let g:ctrlp_max_files=0
set wildignore+=*/target/**
set wildignore+=*/venv/**
set wildignore+=*/node_modules/**
set wildignore+=**/*.retry
set number
nnoremap <F3> :set nonumber!<CR>
let g:go_fmt_command = "goimports"

