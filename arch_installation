#!/bin/bash
set -e
set -o xtrace

section=$1
if [ -z $section ]; then 
  echo "No section given"
  exit 1
fi

if [ $section -eq 1 ]; then
  ####################### partitioning
  echo "/boot - size: 2GiB; hexCode: EF00; name: boot"
  echo "[swap] - size: 16GiB; hexCode: 8200; name: swap"
  echo "/ (root) - size: 30GiB; hexCode: 8300; name: root"
  echo "/home - size: the remainder; hexCode: 8300; name: home"
  echo "write it!"
  cgdisk /dev/sda
  # /boot - size: 2GiB; hexCode: EF00; name: boot
  # [swap] - size: 16GiB; hexCode: 8200; name: swap
  # / (root) - size: 30GiB; hexCode: 8300; name: root
  # /home - size: the remainder; hexCode: 8300; name: home
  # write it!
  echo "Going to reboot, boot again with usb and start with section 2. Press enter"
  read
  reboot
fi

if [ $section -eq 2 ]; then
  ################ formatting new disks
  mkfs.fat -F32 /dev/sda1 # boot partition
  mkswap /dev/sda2 # swap partition
  swapon /dev/sda2 # swap partition
  mkfs.ext4 /dev/sda3 # root partiton
  mkfs.ext4 /dev/sda4 # home partiton
  
  mount /dev/sda3 /mnt # root partition
  mkdir -p {/mnt/boot,/mnt/home}
  mount /dev/sda1 /mnt/boot # boot partition
  mount /dev/sda4 /mnt/home # home partition
  pacstrap -i /mnt base base-devel vim git
  
  genfstab -U -p /mnt >> /mnt/etc/fstab # and replace defaults from swap with "defaults,discard"
  echo "UUID=$(ls -l /dev/disk/by-uuid | grep sdb1 | awk '{print $9}')   /media/personal_drive ext4  defaults  0 0" >> /mnt/etc/fstab
  mkdir -p /mnt/media/personal_drive
  echo "check /mnt/etc/fstab. run 'arch-chroot /mnt' and start the script again with section 3"
fi

if [ $section -eq 3 ]; then
  echo "Give me your username:"
  read user
  echo "Given user: $user. Is this ok? Press enter to continue, CTRL-C to exit"
  read

  vim /etc/locale.gen # uncomment en_US.UTF-8 UTF-8 and ISO
  locale-gen
  echo LANG=en_US.UTF-8 > /etc/locale.conf
  export LANG=en_US.UTF-8
  rm /etc/localtime
  ln -s /usr/share/zoneinfo/Europe/Bucharest /etc/localtime
  echo $user"PC" > /etc/hostname
  
  echo "[archlinuxfr]" >> /etc/pacman.conf
  echo "SigLevel = Never" >> /etc/pacman.conf
  echo "Server = http://repo.archlinux.fr/\$arch" >> /etc/pacman.conf
  echo "enable multilib and check for archlinuxfr. Press enter to continue"
  read
  vim /etc/pacman.conf #uncomment [multilib]
  # add the following 3 lines as well
  pacman -Syu
  
  echo "input root passwd"
  passwd # change root password
  groupadd docker
  groupadd $user
  useradd -m -g users -G wheel,storage,power,docker,$user -s /bin/bash $user
  echo "input $user passwd"
  passwd $user
  EDITOR=vim vim /etc/sudoers # do your thing in here
  pacman -S bash-completion
  
  #bootloader
  #mount -t efivarfs efivarfs /sys/firmware/efi/efivars
  bootctl install
  echo "title Arch Linux" > /boot/loader/entries/arch.conf
  echo "linux /vmlinuz-linux" >> /boot/loader/entries/arch.conf
  echo "initrd /initramfs-linux.img" >> /boot/loader/entries/arch.conf
  echo "initrd /intel-ucode.img" >> /boot/loader/entries/arch.conf
  echo "options root=PARTUUID=$(blkid -s PARTUUID -o value /dev/sda3) rw" >> /boot/loader/entries/arch.conf
  sudo pacman -S intel-ucode nvidia nvidia-libgl lib32-nvidia-libgl lib32-nvidia-utils nvidia-utils networkmanager network-manager-applet
  pacman -S xorg-server xorg-xinit xorg-apps
  # if something is wrong when xserver is started, => pacman -S xf86-video-intel
  echo "Check /boot/loader/entries/arch.conf exit and reboot. Login as root and start the section 4"
fi


if [ $section -eq 4 ]; then
  systemctl enable NetworkManager
  systemctl start NetworkManager

  mkdir $HOME/Downloads

  cd $HOME/Downloads
  git clone https://aur.archlinux.org/i3blocks-gaps-git.git
  cd i3blocks-gaps-git
  makepkg -s
  find . -maxdepth 1 -name "*tar.xz" | cut -d '/' -f2 | xargs -I '{}' mv {} i3blocks-gaps.tar.xz
  sudo pacman -U i3blocks-gaps.tar.xz

  pacman -S ttf-linux-libertine ttf-inconsolata
  pacman -S i3-gaps i3lock i3status rofi compton
  pacman -S ttf-dejavu opendesktop-fonts alsa-utils pavucontrol pulseaudio-alsa
  pacman -S gst-plugins-base gst-plugins-base-libs gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav
  echo "Going to reboot, login as \$user and start with section 5. Enter to continue"
  read
  reboot
fi

############
if [ $section -eq 5 ]; then
  sudo pacman -S xfce4-terminal wget curl
  sudo pacman -S zsh
  git clone http://github.com/robbyrussell/oh-my-zsh.git $HOME/.oh-my-zsh
  chsh -s $(chsh -l | grep zsh | head  -1)
  git clone https://github.com/andreic92/dotfiles $HOME/.dotfiles
  cd $HOME/.dotfiles
  eval ./install_arch.sh
  sudo pacman -S lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings
  sudo systemctl enable lightdm.service
  echo "Going to reboot, login as \$user and start with section 6. Enter to continue"
  read
  reboot
fi

if [ $section -eq 6 ]; then
  mkdir $HOME/Downloads

  cd $HOME/Downloads
  git clone https://aur.archlinux.org/slack-desktop.git
  cd slack-desktop
  makepkg -s
  find . -maxdepth 1 -name "*tar.xz" | cut -d '/' -f2 | xargs -I '{}' mv {} slack.tar.xz
  sudo pacman -U slack.tar.xz

  cd $HOME/Downloads
  git clone https://aur.archlinux.org/google-chrome.git
  cd google-chrome
  makepkg -s
  find . -maxdepth 1 -name "*tar.xz" | cut -d '/' -f2 | xargs -I '{}' mv {} chrome.tar.xz
  sudo pacman -U chrome.tar.xz

  cd $HOME/Downloads
  git clone https://aur.archlinux.org/skypeforlinux-stable-bin.git
  cd skypeforlinux-stable-bin
  makepkg -s
  find . -maxdepth 1 -name "*tar.xz" | cut -d '/' -f2 | xargs -I '{}' mv {} skype.tar.xz
  sudo pacman -U skype.tar.xz

  #sudo pacman -S qt5-script qt5-svc qt5-x11extras libxtst hicolor-icon-theme zip unzip steam youtube-dl copyq # use this instead of the next of if copyq is not working
  sudo pacman -S mc tmux feh gedit code thunar lxappearance transmission-gtk acpi sysstat dstat ack openssh docker ntp dunst libnotify nmap traceroute libreoffice ngrep cronie nedit smplayer ffmpeg pulseaudio-alsa pulseaudio-bluetooth bluez bluez-libs bluez-utils bluez-firmware blueberry arc-gtk-theme moka-icon-theme ncurses tcpdump zip unzip steam youtube-dl copyq python python-pip cmake npm tree imagemagick
  sudo npm install castnow -g
  sudo systemctl enable bluetooth
  sudo systemctl start bluetooth
  sudo systemctl enable ntpd
  sudo systemctl start ntpd
  sudo systemctl enable sshd
  sudo systemctl start sshd
  sudo systemctl enable docker
  sudo systemctl start sshd

  ln -s /media/personal_drive .
  mkdir -p ~/data/workspace
  ln -s ~/personal_drive/storage/Programming/development_softwares/linux/softs ~/data/workspace/softs

  sudo sh -c 'echo "# automatically switch to newly-connected devices" >> /etc/pulse/default.pa'
  sudo sh -c 'echo "load-module module-switch-on-connect" >> /etc/pulse/default.pa'
  echo "CHECK /etc/pulse/default.pa. Check links in home and to the second drive. Check VSCode as well"
  echo "Download wallpapers or link them"
fi
